# ────────────────────────────────────────────────────────────────────────────────────────────────────
#   Reference: {{{

# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#   }}}
# ────────────────────────────────────────────────────────────────────────────────────────────────────

#     ____
#    /\  _`\
#    \ \,\L\_\     __      ____    ____
#     \/_\__ \   /'__`\   /',__\  /',__\
#       /\ \L\ \/\ \L\.\_/\__, `\/\__, `\
#       \ `\____\ \__/.\_\/\____/\/\____/
#        \/_____/\/__/\/_/\/___/  \/___/


priority -50

# SINFIN ======================================

snippet _ "class modifier" b
&__${1}
	${0}
endsnippet

snippet media:down "media down" b
+media-breakpoint-down(${1})
  ${0}
endsnippet

snippet media:up "media up" b
+media-breakpoint-up(${1})
  ${0}
endsnippet

snippet media:desktop "media desktop" b
+mq-desktop-menu
  ${0}
endsnippet

snippet media:mobile "media mobile" b
+mq-mobile-menu
  ${0}
endsnippet

snippet media:screen "@media screen" b
@media screen and (max-width: ${1})
	${2}
endsnippet

snippet spacers "" i
map-get($spacers, ${1:gg})
endsnippet

snippet gp "Gap" i
$gap-${0}
endsnippet

snippet ggh "Half" i
$grid-gutter-half
endsnippet

snippet ggw "Width" i
$grid-gutter-width
endsnippet

snippet ggb "Base " i
$grid-gutter-base
endsnippet

snippet bold "" i
$font-weight-bold
endsnippet

snippet normal "" i
$font-weight-normal
endsnippet

snippet font:lg "Large font" b
+font-size-lg
endsnippet

snippet font:sm "Small font" b
+font-size-sm
endsnippet

snippet font:h1 "Heading 1 font" b
+font-h1
endsnippet

snippet font:h2 "Heading 2 font" b
+font-h2
endsnippet

snippet font:h3 "Heading 3 font" b
+font-h3
endsnippet

snippet font:h4 "Heading 4 font" b
+font-h4
endsnippet

# =============================================

snippet triangle:up "Triangle Up" b
width: 0
height: 0
border-left: ${1}px solid transparent
border-right: ${1}px solid transparent
border-bottom: ${1}px solid ${0}
endsnippet

snippet triangle:down "Triangle Down" b
width: 0
height: 0
border-left: ${1}px solid transparent
border-right: ${1}px solid transparent
border-top: ${1}px solid ${0}
endsnippet

snippet triangle:left "Triangle Left" b
width: 0
height: 0
border-top: ${1}px solid transparent
border-bottom: ${1}px solid transparent
border-right: ${1}px solid ${0}
endsnippet

snippet triangle:right "Triangle Right" b
width: 0
height: 0
border-top: ${1}px solid transparent
border-bottom: ${1}px solid transparent
border-left: ${1}px solid ${0}
endsnippet

snippet $
$${1:variable}: ${0:value}
endsnippet

snippet imp
@import '${0}'
endsnippet

snippet mix
=${1:name}(${2})
	${0}
endsnippet

snippet inc
+${1:mixin}(${2})
endsnippet

snippet ext
@extend ${0}
endsnippet

snippet fun
@function ${1:name}(${2:args})
	${0}
endsnippet

snippet if
@if ${1:condition}
	${0:${VISUAL}}
endsnippet

snippet ife
@if ${1:condition}
	${2:${VISUAL}}
@else
	${0}
endsnippet

snippet eif
@else if ${1:condition}
	${0:${VISUAL}}
endsnippet

snippet for
@for ${1:$i} from ${2:1} through ${3:3}
	${0}
endsnippet

snippet each
@each ${1:$item} in ${2:items}
	${0}
endsnippet

snippet while
@while ${1:$i} ${2:>} ${3:0}
	${0:${VISUAL}}
endsnippet

snippet @f
@font-face
	font-family: ${1}
	src: url('${0}')
endsnippet

snippet @m
@media ${1:print}
	${0}
endsnippet
