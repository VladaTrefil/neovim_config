# ────────────────────────────────────────────────────────────────────────────────────────────────────
#   Reference: {{{

# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#   }}}
# ────────────────────────────────────────────────────────────────────────────────────────────────────

#                                                                      __
#     __                                                    __        /\ \__
#    /\_\     __     __  __     __      ____    ___   _ __ /\_\  _____\ \ ,_\
#    \/\ \  /'__`\  /\ \/\ \  /'__`\   /',__\  /'___\/\`'__\/\ \/\ '__`\ \ \/
#     \ \ \/\ \L\.\_\ \ \_/ |/\ \L\.\_/\__, `\/\ \__/\ \ \/ \ \ \ \ \L\ \ \ \_
#     _\ \ \ \__/.\_\\ \___/ \ \__/.\_\/\____/\ \____\\ \_\  \ \_\ \ ,__/\ \__\
#    /\ \_\ \/__/\/_/ \/__/   \/__/\/_/\/___/  \/____/ \/_/   \/_/\ \ \/  \/__/
#    \ \____/                                                      \ \_\
#     \/___/                                                        \/_/


priority -50

snippet prototype
prototype.${1:method_name} = function(${3}) {
	${0:${VISUAL}}
}
endsnippet

# Function
snippet function "function"
function ${1:function_name}(${2}) {
	${0:${VISUAL}}
}
endsnippet

# Anonymous Function assigned to variable
snippet vat
var ${1:function_name} = function(${2}) {
	${0:${VISUAL}}
}
endsnippet

# Function assigned to variable
snippet var:function
var ${1:function_name} = function $1(${2}) {
	${0:${VISUAL}}
}
endsnippet

# Immediate function
snippet (function
(function(${1}) {
	${0:${VISUAL}}
}(${2}))
endsnippet

# if
snippet if "if (condition) { ... }"
if (${1:true}) {
	${0:${VISUAL}}
}
endsnippet

# if ... else
snippet if:else "if (condition) { ... } else { ... }"
if (${1:true}) {
	${0:${VISUAL}}
} else {
	${2}
}
endsnippet

# tertiary conditional
snippet ternary
${1:/* condition */} ? ${2:/* if true */} : ${0:/* if false */}
endsnippet

# switch
snippet switch
switch (${1:expression}) {
	case '${3:case}':
		${4}
		break
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${1:case}':
	${0:${VISUAL}}
	break
endsnippet

snippet try "try { ... } catch(e) { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
}
endsnippet

snippet tryf "try { ... } catch(e) { ... } finally { ... }"
try {
	${0:${VISUAL}}
} catch (${1:e}) {
	${2:/* handle error */}
} finally {
	${3:/* be executed regardless of the try / catch result*/}
}
endsnippet

# throw Error
snippet terr
throw new Error('${1:error message}')
endsnippet

# return
snippet ret
return ${0:result}
endsnippet

snippet for "for (...) {...}"
for (let ${1:i} = 0, ${2:len} = ${3:Things.length} $1 < $2 $1++) {
	${0:${VISUAL}}
}
endsnippet

snippet forof "for (const prop of object}) { ... }"
for (${1:const} ${2:prop} of ${3:object}) {
	${0}
}
endsnippet

snippet fori
for (let ${1:prop} in ${2:object}) {
	${0:$2[$1]}
}
endsnippet

snippet forr "reversed for (...) {...}"
for (let ${2:i} = ${1:Things.length} - 1 $2 >= 0 $2--) {
	${0:${VISUAL}}
}
endsnippet

snippet wh "(condition) { ... }"
while (${1:/* condition */}) {
	${0:${VISUAL}}
}
endsnippet

snippet do "do { ... } while (condition)"
do {
	${0:${VISUAL}}
} while (${1:/* condition */})
endsnippet
# For in loop

snippet fori
for (let ${1:prop} in ${2:object}) {
${0:$2[$1]}
}
endsnippet

# Object Method
snippet :f
${1:method_name}: function (${2:attribute}) {
${0:${VISUAL}}
},
endsnippet

# hasOwnProperty
snippet has
hasOwnProperty(${0})
endsnippet

# singleton
snippet sing
function ${1:Singleton} (${2:argument}) {
// the cached instance
var instance

// rewrite the constructor
$1 = function $1($2) {
	return instance
}

// carry over the prototype properties
$1.prototype = this

// the instance
instance = new $1()

// reset the constructor pointer
instance.constructor = $1

${0}

return instance
}
endsnippet

# Documentation
# docstring
snippet /**
/**
* ${0:description}
*
*/
endsnippet

snippet @param
@param {${1:type}} ${2:name} ${0:description}
endsnippet

snippet @return
@return {${1:type}} ${0:description}
endsnippet

# JSON.parse
snippet json:parse
JSON.parse(${0:jstr})
endsnippet

# JSON.stringify
snippet json:stringify
JSON.stringify(${0:object})
endsnippet

# Elements by class
snippet getElementsByClassName
getElementsByClassName('${0:class}')
endsnippet

# Element by ID
snippet getElementById
getElementById('${0:element ID}')
endsnippet

# Query selector
snippet querySelector
querySelector('${0:CSS selector}')
endsnippet

# Query selector all
snippet querySelectorAll
.querySelectorAll('${0:CSS selector}')
endsnippet

snippet console "console.log"
console.log(${0})
endsnippet

snippet console:debug "console.debug"
console.debug(${0})
endsnippet

snippet console:error "console.error"
console.error(${0})
endsnippet

snippet console:warn "console.warn"
console.warn(${0})
endsnippet

snippet console:info "console.info"
console.info(${0})
endsnippet

snippet console:json "console.log stringified"
console.log(JSON.stringify(${0}, null, 2))
endsnippet

# Misc
snippet strict
'use strict'
endsnippet

# setTimeout function
snippet setTimeout
setTimeout(function () {${0}}${2}, ${1:10})
endsnippet

snippet const
const ${1} = ${0}
endsnippet

snippet const:new
const ${1} = new ${0}
endsnippet

snippet let
let ${1} = ${0}
endsnippet

snippet import "import xyz from 'xyz'"
import ${1} from './${0:$1}'
endsnippet

snippet import:module "import xyz from 'xyz'"
import ${1} from '${1/\w+/\l$0/}'
endsnippet

snippet import:as "import * as xyz from 'xyz'"
import * as ${1} from '${0:$1}'
endsnippet

snippet import:member "import { member } from 'xyz'"
import { ${1} } from '${2}'
endsnippet

snippet class
class ${1} {
	${0:${VISUAL}}
}
endsnippet

snippet claext
class ${1} extends ${2} {
	${0:${VISUAL}}
}
endsnippet

snippet clacon
class ${1} {
	constructor(${2}) {
		${0:${VISUAL}}
	}
}
endsnippet

snippet c=>
const ${1:function_name} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet

snippet =>
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet af "() =>"
(${1}) => ${0:${VISUAL}}
endsnippet

snippet afb "() => {}"
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

snippet sym
const ${1} = Symbol('${0}')
endsnippet

snippet expdef
export default ${0}
endsnippet

snippet ${
\${${1}}${2}
endsnippet

# TODO: Get path to file in folio format
snippet foo ""
`!p snip.rv = os.getcwd() + snip.basename`
endsnippet

snippet stim:controller
window.Folio.Stimulus.register('${2}', class extends window.Stimulus.Controller {
	${0}
})
endsnippet

snippet stim:targets "Stimulus targets" b
static targets = ['${0}']
endsnippet

snippet stim:values "Stimulus values" b
static values = { ${1}: ${0:String} }
endsnippet

snippet stim:classes "Stimulus classes" b
static classes = ['${0}']
endsnippet
