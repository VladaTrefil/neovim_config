# ────────────────────────────────────────────────────────────────────────────────────────────────────
#   Reference: {{{

# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#   }}}
# ────────────────────────────────────────────────────────────────────────────────────────────────────

#                                __       
#                               /\ \__    
#     _ __    __     __      ___\ \ ,_\   
#    /\`'__\/'__`\ /'__`\   /'___\ \ \/   
#    \ \ \//\  __//\ \L\.\_/\ \__/\ \ \_  
#     \ \_\\ \____\ \__/.\_\ \____\\ \__\ 
#      \/_/ \/____/\/__/\/_/\/____/ \/__/ 
#                                        

priority -50

global !p
# Capitalize the first letter without affecting the rest of the letters
def capitalize_first(word):
	if(word):
		word = word[0].upper() + word[1:]
	return word
endglobal

snippet rim "Import React" b
import React from 'react'
endsnippet

snippet useS "useState Hook" b
const [${1}, set`!p snip.rv=capitalize_first(t[1])`] = useState(${3:"${4}"})
endsnippet

snippet useEf "useEffect Hook" b
useEffect(() => {
	${1:${0}}
		}${2})
endsnippet

snippet useC "useContext Hook" b
const ${1:context} = useContext(${2})
endsnippet

snippet useRe "useReducer Hook" b
const [${3:state}, ${4:dispatch}] = useReducer(${5:reducer}, ${2:initial_value})
endsnippet

snippet useCB "useCallback(fn, inputs)" b
const ${1:callback} = useCallback((${2})) => ${3:{
	${4}
}}, [${5}])
endsnippet

snippet useM "useMemo(fn, inputs)" b
const ${1:memorized} = useMemo(() => ${2:{
	${3}
}}, [${4}])
endsnippet

snippet useR "useRef(defaultValue)" b
const ${1:ref} = useRef(${2:null})
endsnippet

snippet rfc "react functional component" b
import React, {useState} from "react"

function ${1:`!p snip.rv = snip.basename`}(${2}){
	return(
		${3:<p>Body</p>}
	)
}

export default $4`!p snip.rv = snip.basename`
endsnippet

# snippet rcc "react functional component" b
# import React from "react"
#
# class ${1:`!p snip.rv = snip.basename`} extends React.Component {
# 	constructor(props) {
# 		super(props)
#
# 		this.state = {
# 			${2}
# 		}
# 	}
#
# 	render = () => (
# 		${0}
# 	)
# }
#
# export default ${1:`!p snip.rv = snip.basename`}
# endsnippet

snippet cmdm "componentDidMount" b
componentDidMount() {
	${0}
}
endsnippet

snippet Fragment "React Fragment" b
<React.Fragment>
	${0}
</React.Fragment>
endsnippet
