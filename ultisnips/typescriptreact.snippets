# ────────────────────────────────────────────────────────────────────────────────────────────────────
#   Reference: {{{

# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#   }}}
# ────────────────────────────────────────────────────────────────────────────────────────────────────

#                                __        ______  ____       
#                               /\ \__    /\__  _\/\  _`\     
#     _ __    __     __      ___\ \ ,_\   \/_/\ \/\ \,\L\_\   
#    /\`'__\/'__`\ /'__`\   /'___\ \ \/      \ \ \ \/_\__ \   
#    \ \ \//\  __//\ \L\.\_/\ \__/\ \ \_      \ \ \  /\ \L\ \ 
#     \ \_\\ \____\ \__/.\_\ \____\\ \__\      \ \_\ \ `\____\
#      \/_/ \/____/\/__/\/_/\/____/ \/__/       \/_/  \/_____/


priority -50

extends typescript
extends javascriptreact

snippet rcc "react functional component" b
import React from "react"

type ${1:`!p snip.rv = snip.basename`}Props = {}

type ${1:`!p snip.rv = snip.basename`}State = {}

class ${1:`!p snip.rv = snip.basename`} extends React.Component<${1:`!p snip.rv = snip.basename`}Props, ${1:`!p snip.rv = snip.basename`}State> {
	constructor(props) {
		super(props)

		this.state = {
			${2}
		}
	}

	render = () => (
		<${3}>
			${0}
		</${3}>
	)
}

export default ${1:`!p snip.rv = snip.basename`}
endsnippet


snippet Props "React component props type" b
interface Props {
	${1:key}: ${2:any}
}
endsnippet

snippet reclass "React Class Component" b
class ${1} extends React.Component<{}, AppState> {
	constructor(${2:\{\}}: any) {
		super(props)

		${2}
	}

	render = () => (
		${0}
	)
}
endsnippet

snippet refun "React Functional Component" b
const ${1} = ({ ${2} }: ${3:Props}): ${4:any} => {
	return (
		${0}
	)
}
endsnippet

snippet refun "React Functional Component return" b
const ${1} = ({ ${2} }: ${3:Props}): ${4:any} => (
	${0}
)
endsnippet

snippet reinit "Init react component" b
import React from 'react'

interface Props {
	${1:key}: ${2:any}
}

const ${1} = ({ ${2} }: ${3:Props}): ${4:any} => {
	return (
		${0}
	)
}

export default ${1}
endsnippet

